---
- name: "Git 및 개발 도구 설치"
  hosts: proxmox
  gather_facts: yes
  vars:
    # Git 설정
    git_user_name: ""           # 사용자가 필요시 설정
    git_user_email: ""          # 사용자가 필요시 설정
    
    # 설치할 패키지 목록 (Debian/ProxMox 호환)
    development_packages:
      - git
      - curl
      - wget
      - vim
      - htop
      - tree
      - unzip
      - build-essential
    
    # 선택적 패키지
    optional_packages:
      - nano
      - screen
      - tmux
      - rsync

  tasks:
    - name: "=== Git 및 개발 도구 설치 시작 ==="
      debug:
        msg: |
          ================================
          Git 및 개발 도구 자동 설치
          ================================
          
          🎯 목적: ProxMox 서버에 개발 및 관리 도구 설치
          📋 설치 예정 패키지:
          • Git (버전 관리)
          • Curl/Wget (다운로드 도구)
          • Vim/Nano (텍스트 에디터)
          • Htop (시스템 모니터링)
          • Build-essential (컴파일 도구)
          • 기타 유용한 시스템 도구들
          
          ⏱️ 예상 소요시간: 2-5분
          ================================

    - name: "1단계: 현재 시스템 정보 확인"
      debug:
        msg: |
          시스템 정보:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - 아키텍처: {{ ansible_architecture }}
          - 사용 가능한 메모리: {{ ansible_memfree_mb }}MB

    - name: "2단계: APT 패키지 목록 업데이트"
      apt:
        update_cache: yes
        cache_valid_time: 3600
      register: apt_update_result

    - name: "APT 업데이트 결과"
      debug:
        msg: |
          {{ '✅ APT 패키지 목록 업데이트 완료' if apt_update_result.changed else '✅ APT 캐시가 최신 상태' }}

    - name: "3단계: 필수 개발 도구 설치"
      apt:
        name: "{{ development_packages }}"
        state: present
        update_cache: no
      register: package_install_result

    - name: "필수 패키지 설치 결과"
      debug:
        msg: |
          필수 개발 도구 설치 결과:
          {{ '✅ 새 패키지가 설치되었습니다' if package_install_result.changed else '✅ 모든 패키지가 이미 최신 상태입니다' }}

    - name: "4단계: 선택적 도구 설치"
      apt:
        name: "{{ optional_packages }}"
        state: present
        update_cache: no
      register: optional_install_result
      failed_when: false

    - name: "선택적 패키지 설치 결과"
      debug:
        msg: |
          선택적 도구 설치 결과:
          {{ '✅ 추가 도구가 설치되었습니다' if optional_install_result.changed else '✅ 선택적 도구들이 이미 설치되어 있거나 사용할 수 없습니다' }}

    - name: "5단계: Git 설치 확인 및 버전 체크"
      command: git --version
      register: git_version_check
      changed_when: false

    - name: "Git 설치 확인 결과"
      debug:
        msg: |
          Git 설치 상태:
          {{ git_version_check.stdout }}

    - name: "6단계: 설치된 패키지 목록 확인"
      shell: |
        echo "=== 설치된 개발 도구 버전 ==="
        echo "Git: $(git --version 2>/dev/null || echo '설치되지 않음')"
        echo "Curl: $(curl --version 2>/dev/null | head -1 || echo '설치되지 않음')"
        echo "Vim: $(vim --version 2>/dev/null | head -1 || echo '설치되지 않음')"
        echo "Htop: $(htop --version 2>/dev/null | head -1 || echo '설치되지 않음')"
        
        echo -e "\n=== 시스템 도구 ==="
        echo "Tree: $(tree --version 2>/dev/null | head -1 || echo '설치되지 않음')"
        echo "Unzip: $(unzip -v 2>/dev/null | head -1 || echo '설치되지 않음')"
        
        echo -e "\n=== 디스크 사용량 ==="
        df -h / | tail -1 | awk '{print "사용량: " $3 "/" $2 " (" $5 ")"}'
        
        echo -e "\n=== 메모리 사용량 ==="
        free -h | grep "^Mem" | awk '{print "메모리: " $3 "/" $2}'
      register: system_info
      changed_when: false

    - name: "시스템 상태 및 도구 확인 결과"
      debug:
        msg: |
          현재 시스템 상태:
          {{ system_info.stdout }}

    - name: "7단계: Git 전역 설정 (선택사항)"
      block:
        - name: "Git 사용자 이름 설정"
          git_config:
            name: user.name
            value: "{{ git_user_name }}"
            scope: global
          when: git_user_name != ""

        - name: "Git 사용자 이메일 설정"
          git_config:
            name: user.email
            value: "{{ git_user_email }}"
            scope: global
          when: git_user_email != ""

        - name: "Git 기본 브랜치 설정 (main)"
          git_config:
            name: init.defaultBranch
            value: main
            scope: global

        - name: "Git 설정 확인"
          shell: |
            echo "=== Git 전역 설정 ==="
            git config --global --list | grep -E "(user\.|init\.)" || echo "Git 사용자 설정이 없습니다"
          register: git_config_check
          changed_when: false

        - name: "Git 설정 결과 출력"
          debug:
            msg: |
              Git 설정 상태:
              {{ git_config_check.stdout }}

    - name: "🎉 설치 완료 및 사용 안내"
      debug:
        msg: |
          ================================
          🎉 Git 및 개발 도구 설치 완료!
          ================================
          
          ✅ 설치된 도구들:
          • Git - 버전 관리 시스템
          • Curl/Wget - 파일 다운로드 도구
          • Vim/Nano - 텍스트 에디터
          • Htop - 시스템 모니터링
          • Tree - 디렉터리 구조 표시
          • Build-essential - 컴파일 환경
          
          📋 이제 사용 가능한 명령:
          
          1. Git 저장소 복제:
             git clone <저장소 URL>
          
          2. 시스템 모니터링:
             htop                    # 실시간 프로세스 모니터
             tree /path              # 디렉터리 구조 표시
             
          3. 파일 다운로드:
             curl -O <URL>           # 파일 다운로드
             wget <URL>              # 파일 다운로드
          
          4. 텍스트 편집:
             vim <파일명>            # Vim 에디터
             nano <파일명>           # Nano 에디터
          
          💡 Git 사용을 위한 추가 설정:
          
          Git 사용자 정보 설정 (최초 1회):
          git config --global user.name "Your Name"
          git config --global user.email "your.email@example.com"
          
          SSH 키 생성 (GitHub/GitLab 연결용):
          ssh-keygen -t ed25519 -C "your.email@example.com"
          
          🔧 ProxMox 관리에 유용한 명령들:
          - htop: 실시간 시스템 모니터링
          - tree: 디렉터리 구조 확인
          - curl: API 호출 및 파일 다운로드
          - git: 설정 파일 버전 관리
          
          ================================
